
Each req call api => Check res.msg. If 'success' => OK else FAIL

// Get all user account
Method: GET
Auth: Yes
Roles: Admin only
Req.body: {}
URL: /users?page=1&limit=2
If 'success' => {
    msg: 'success'.
    length: Number,
    users: Array,
    request: {
        currentPage: 1,
        totalPages: 2,
        next: {
            page: 2,
            limit: 1
        }
    }
}

NOTE: ?page=1&limit=2 (option)

----------------------------------------------------------------------------

// Get one user
Method: GET
Auth: Yes
URL: users/:userId
If 'success' => {
    name: String,
    email: String,
    roles: String,
    isVerified: Boolean
}
----------------------------------------------------------------------------

// Create new account
Method: POST
Auth: No
Req.body:
{
	name: String        ---> unique
	email: String       ---> unique
	password: String
}
URL: /users
If 'success' => Check email => Verify

----------------------------------------------------------------------------

// Update user
Method: PATCH
Auth: Yes
Roles: User or Admin
Req.body:
[
	{
		"propName": "password",
		"value": "1234567"
	},
	{
		"propName": "name",
		"value": "tuilathaiday"
	}
]

NOTE: propName in ["name", "roles", "cash", "password"]

URL: /users/:userId
If 'success' => {
    msg: 'success',
}

----------------------------------------------------------------------------

// Delete user
Method: DELETE
Auth: Yes
Roles: Admin only
Req.body: {}
URL: /users/:userId
If 'success' => {
    msg: 'success
}

----------------------------------------------------------------------------

// Email verify
Method: GET (in email)
Auth: No
Req.body: {}
URL: /users/confirm/:verifyToken
If 'success' => Account verified and user can login

----------------------------------------------------------------------------

// Resend email verify
Method: POST
Auth: No
Req.body:
{
	email: String
}
URL: /users/confirm/resend
If 'success' => Check email => Verify

----------------------------------------------------------------------------

// User login
Method: POST
Auth: No
Req.body:
{
	email: String,
    password: String
}
URL: /users/login
If 'success' => Obj {
    msg: 'success',
    token: String,
    refreshToken: String
}

----------------------------------------------------------------------------

// User refresh token
Method: POST
Auth: No
Req.body:
{
	refreshToken: String
}
URL: /users/login/refresh
If 'success' => Obj {
    msg: 'success',
    token: String
}

----------------------------------------------------------------------------

// Reset password
Method: POST
Auth: No
Req.body:
{
	email: String
}
URL: /users/recovery
If 'success' => Check email and copy passwordResetToken for api Forgot password

----------------------------------------------------------------------------

// Forgot password
Method: POST
Auth: No
Req.body:
{
    newPassword: String,
	passwordResetToken: String (below)
}
URL: /users/forgot
If 'success' => {
    msg: 'success'
}

----------------------------------------------------------------------------

// Get history
Method: POST
Auth: Yes
Roles: User or Admin
Req.body 2 use case:
1:  {}
    ----> Get all (Admin only)

2:  {
        "type": "rolls",
        "effect": "personal"
    }
    -----> Get one (User or Admin)

*Note:
    type in ['accInfos', 'items', 'rolls', 'codes', 'blogs']
    effect in ['personal', 'manage']

URL: /users/history

----------------------------------------------------------------------------


Resources:

Token decode test: https://jwt.io/

Email garbage: https://10minutemail.net/

DB atlas: https://www.mongodb.com/cloud/atlas
    - Sign in with account 'google blogger'
    - DB name: The-Walker
    - Choose on tab Collections